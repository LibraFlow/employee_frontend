image: node:18

stages:
  - build
  - quality
  - test

build:
  stage: build
  script:
    - cd employee_frontend
    - npm install
    - $env:CI = "false"; npm run build
  artifacts:
    paths:
      - build/
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests

quality:
  stage: quality
  script:
    - cd employee_frontend
    - npm install
    # Run ESLint for code quality checks and generate JSON report
    - npm run lint -- --output-file eslint-report.json --format json
    # Run ESLint and generate HTML report
    - npm run lint -- --output-file eslint-report.html --format html
    # Run ESLint with --fix to automatically fix issues where possible
    - npm run lint:fix
    # Run security audit
    - npm audit --audit-level=moderate
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - employee_frontend/eslint-report.json
      - employee_frontend/eslint-report.html
  allow_failure: true
  only:
    - main
    - develop
    - merge_requests

test:
  stage: test
  script:
    - cd employee_frontend
    - npm install
    - npm test -- --passWithNoTests
  only:
    - main
    - develop
    - merge_requests

e2e-integration:
  stage: test
  script:
    - docker-compose -f docker-compose.e2e.yml up -d --build
    # Wait for all services to be ready with better health checks
    - |
      Write-Host "Waiting for all services to be ready..."
      $services = @(
        @{Name="Frontend"; Url="http://localhost:3001"; ExpectedStatus=200},
        @{Name="API Gateway"; Url="http://localhost:3000/health"; ExpectedStatus=200},
        @{Name="Book Service"; Url="http://localhost:8082/actuator/health"; ExpectedStatus=200},
        @{Name="BookUnit Service"; Url="http://localhost:8085/actuator/health"; ExpectedStatus=200},
        @{Name="Borrowing Service"; Url="http://localhost:8086/actuator/health"; ExpectedStatus=200},
        @{Name="User Service"; Url="http://localhost:8087/actuator/health"; ExpectedStatus=200}
      )
      
      foreach ($service in $services) {
        $maxAttempts = 60
        $attempt = 0
        $ready = $false
        
        Write-Host "Checking $($service.Name)..."
        while ($attempt -lt $maxAttempts -and -not $ready) {
          $attempt++
          try {
            $response = Invoke-WebRequest -Uri $service.Url -UseBasicParsing -TimeoutSec 5
            if ($response.StatusCode -eq $service.ExpectedStatus) {
              Write-Host "$($service.Name) is ready after $attempt attempts"
              $ready = $true
            }
          } catch {
            Write-Host "$($service.Name) not ready yet (attempt $attempt/$maxAttempts)"
          }
          if (-not $ready) {
            Start-Sleep -Seconds 5
          }
        }
        
        if (-not $ready) {
          Write-Error "$($service.Name) failed to start after $maxAttempts attempts"
          exit 1
        }
      }
      
      Write-Host "All services are ready!"
      # Additional wait to ensure services are fully initialized
      Start-Sleep -Seconds 10
    - cd employee_frontend
    - npm install
    # Run Cypress with retry logic and better configuration
    - npx cypress run --retries 2 --config defaultCommandTimeout=15000,requestTimeout=15000,responseTimeout=15000
  after_script:
    - docker-compose -f docker-compose.e2e.yml down
  only:
    - main
    - develop
    - merge_requests